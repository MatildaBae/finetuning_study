# -*- coding: utf-8 -*-
"""PEFT_prompt_tuning_Nsmc_Kobert.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VlrT9-Ilkw2Otc1SZajWyKfB9VbwVhXm

# Prompt Tuning casual language modeling 예제 - twitter_complaints 데이터셋
## 작성자 : AISchool ([http://aischool.ai/](http://aischool.ai/%ec%98%a8%eb%9d%bc%ec%9d%b8-%ea%b0%95%ec%9d%98-%ec%b9%b4%ed%85%8c%ea%b3%a0%eb%a6%ac/) )
## Reference : https://huggingface.co/docs/peft/task_guides/clm-prompt-tuning

# 필요한 라이브러리 설치
"""

!pip install -q peft transformers datasets

"""# 설정값 지정"""

from transformers import AutoModelForCausalLM, AutoTokenizer, default_data_collator, get_linear_schedule_with_warmup
from peft import get_peft_config, get_peft_model, PromptTuningInit, PromptTuningConfig, TaskType, PeftType
import torch
from datasets import load_dataset
import os
from torch.utils.data import DataLoader
from tqdm import tqdm

device = "cuda"
# model_name_or_path = "bigscience/bloomz-560m"
# tokenizer_name_or_path = "bigscience/bloomz-560m"

model_name_or_path = "beomi/kcbert-base"
tokenizer_name_or_path = "beomi/kcbert-base"

# dataset_name = "twitter_complaints"
# text_column = "Tweet text"

dataset_name = "nsmc"
text_column = "document"
label_column = "text_label"
max_length = 64
lr = 3e-2
num_epochs = 1
batch_size = 128

"""# twitter_complaints 데이터셋 불러오기
## (RAFT 데이터셋의 부분집합 데이터셋으로 **트위터 문장이 불평(항의)(complaint)인지 아닌지를 분류**하는 데이터셋입니다.)
"""

dataset = load_dataset("ought/raft", dataset_name)
dataset["train"][0]

classes = [k.replace("_", " ") for k in dataset["train"].features["Label"].names]
dataset = dataset.map(
    lambda x: {"text_label": [classes[label] for label in x["Label"]]},
    batched=True,
    num_proc=1,
)
dataset["train"][0]

dataset["train"][2]

"""# Nsmc 데이터셋 불러오기"""

dataset = load_dataset("nsmc")
dataset["train"][0]

dataset = load_dataset(dataset_name)
classes = ["긍정", "부정"]
dataset = dataset.map(
    lambda x: {"text_label": classes[x["label"]]},
    num_proc=1,
)

dataset["train"][0]

"""# Tokenizer 불러오기 & 데이터셋 전처리"""

tokenizer = AutoTokenizer.from_pretrained(model_name_or_path)
if tokenizer.pad_token_id is None:
    tokenizer.pad_token_id = tokenizer.eos_token_id

# def preprocess_function(examples):
#     batch_size = len(examples[text_column])
#     inputs = [f"{text_column} : {x} Label : " for x in examples[text_column]]
#     targets = [str(x) for x in examples[label_column]]
#     model_inputs = tokenizer(inputs)
#     labels = tokenizer(targets)

#     # 앞에 프롬프트랑 X를 놓고, 뒤에 Y를 붙이는 형태로,
#     # 나중에 예측할 때에는 마지막에 붙는 Y를 예측하는 형태
#     for i in range(batch_size):
#         sample_input_ids = model_inputs["input_ids"][i]
#         label_input_ids = labels["input_ids"][i] + [tokenizer.pad_token_id]
#         #print(i, sample_input_ids, label_input_ids)
#         model_inputs["input_ids"][i] = sample_input_ids + label_input_ids
#         labels["input_ids"][i] = [-100] * len(sample_input_ids) + label_input_ids
#         model_inputs["attention_mask"][i] = [1] * len(model_inputs["input_ids"][i])
#     #print(model_inputs)

#     for i in range(batch_size):
#         sample_input_ids = model_inputs["input_ids"][i]
#         label_input_ids = labels["input_ids"][i]
#         model_inputs["input_ids"][i] = [tokenizer.pad_token_id] * (
#             max_length - len(sample_input_ids)
#         ) + sample_input_ids
#         model_inputs["attention_mask"][i] = [0] * (max_length - len(sample_input_ids)) + model_inputs[
#             "attention_mask"
#         ][i]
#         labels["input_ids"][i] = [-100] * (max_length - len(sample_input_ids)) + label_input_ids
#         model_inputs["input_ids"][i] = torch.tensor(model_inputs["input_ids"][i][:max_length])
#         model_inputs["attention_mask"][i] = torch.tensor(model_inputs["attention_mask"][i][:max_length])
#         labels["input_ids"][i] = torch.tensor(labels["input_ids"][i][:max_length])

#     model_inputs["labels"] = labels["input_ids"]

#     return model_inputs

# processed_datasets = dataset.map(
#     preprocess_function,
#     batched=True,
#     num_proc=1,
#     remove_columns=dataset["train"].column_names,
#     load_from_cache_file=False,
#     desc="Running tokenizer on dataset",
# )

def preprocess_function(examples):
    inputs = examples[text_column]
    targets = examples[label_column]
    model_inputs = tokenizer(inputs, max_length=max_length, truncation=True, padding="max_length")
    labels = tokenizer(targets, max_length=max_length, truncation=True, padding="max_length")
    model_inputs["labels"] = labels["input_ids"]
    return model_inputs

processed_datasets = dataset.map(
    preprocess_function,
    batched=True,
    num_proc=1,
    remove_columns=dataset["train"].column_names,
    load_from_cache_file=False,
    desc="Running tokenizer on dataset",
)

train_dataset = processed_datasets["train"]
eval_dataset = processed_datasets["test"]

train_dataloader = DataLoader(
    train_dataset, shuffle=True, collate_fn=default_data_collator, batch_size=batch_size, pin_memory=True
)
eval_dataloader = DataLoader(eval_dataset, collate_fn=default_data_collator, batch_size=batch_size, pin_memory=True)

"""# PEFT 모델 설정"""

# PEFT를 이용한 PromtTuning 설정

# peft_config = PromptTuningConfig(
#     task_type=TaskType.CAUSAL_LM, # 태스크 타입 지정
#     prompt_tuning_init=PromptTuningInit.TEXT, # 단어토큰으로 이니셜라이징
#     num_virtual_tokens=8, # 앞에 임베딩 토큰 개수 -> 수정 가능
#     prompt_tuning_init_text="Classify if the tweet is a complaint or not:", # 정보값을 가진 임베딩 토큰 초기 이니셜 값 -> 수정 가능
#     tokenizer_name_or_path=model_name_or_path,
# )

peft_config = PromptTuningConfig(
    task_type=TaskType.CAUSAL_LM,  # Causal Language Modeling
    peft_type=PeftType.PROMPT_TUNING,
    num_virtual_tokens=20,  # Number of virtual tokens to add
    tokenizer_name_or_path=tokenizer_name_or_path,
)

"""# Prompt Tuning 기법으로 인해 전체 모델의 0.0014%의 파라미터만 Fine-Tuning에 사용"""

model = AutoModelForCausalLM.from_pretrained(model_name_or_path).to(device)
model = get_peft_model(model, peft_config)
model.print_trainable_parameters()

# model = AutoModelForSequenceClassification.from_pretrained(model_name_or_path).to(device)
# model = get_peft_model(model, peft_config)
# model.print_trainable_parameters()

"""# Training 시작"""

optimizer = torch.optim.AdamW(model.parameters(), lr=lr)
lr_scheduler = get_linear_schedule_with_warmup(
    optimizer=optimizer,
    num_warmup_steps=0,
    num_training_steps=(len(train_dataloader) * num_epochs),
)

for epoch in range(num_epochs):
    model.train()
    total_loss = 0
    for step, batch in enumerate(tqdm(train_dataloader, desc=f"Epoch {epoch + 1}/{num_epochs}")):
        batch = {k: v.to(device) for k, v in batch.items()}
        outputs = model(**batch)
        loss = outputs.loss
        total_loss += loss.detach().float()
        loss.backward()
        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()

    model.eval()
    eval_loss = 0
    eval_preds = []
    for step, batch in enumerate(tqdm(eval_dataloader, desc="Evaluating")):
        batch = {k: v.to(device) for k, v in batch.items()}
        with torch.no_grad():
            outputs = model(**batch)
        loss = outputs.loss
        eval_loss += loss.detach().float()
        eval_preds.extend(
            tokenizer.batch_decode(torch.argmax(outputs.logits, -1).detach().cpu().numpy(), skip_special_tokens=True)
        )

    eval_epoch_loss = eval_loss / len(eval_dataloader)
    eval_ppl = torch.exp(eval_epoch_loss)
    train_epoch_loss = total_loss / len(train_dataloader)
    train_ppl = torch.exp(train_epoch_loss)
    print(f"epoch={epoch + 1}: train_ppl={train_ppl} train_epoch_loss={train_epoch_loss} eval_ppl={eval_ppl} eval_epoch_loss={eval_epoch_loss}")

"""# 학습이 끝난 모델을 sample text에 대한 Inference"""

# inputs = tokenizer(
#     f'{text_column} : {"@nationalgridus I have no water and the bill is current and paid. Can you do something about this?"} Label : ',
#     return_tensors="pt",
# )

inputs = tokenizer(
    f'{text_column} : "아 더빙.. 진짜 짜증나네요 목소리" Label : ',
    return_tensors="pt",
)

model.to(device)

with torch.no_grad():
    inputs = {k: v.to(device) for k, v in inputs.items()}
    outputs = model.generate(
        input_ids=inputs["input_ids"], attention_mask=inputs["attention_mask"], max_new_tokens=10, eos_token_id=tokenizer.eos_token_id
    )
    print(tokenizer.batch_decode(outputs.detach().cpu().numpy(), skip_special_tokens=True))

